version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: hdb_postgres
    restart: always
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-hdb_data}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data:/data
      - ./data/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hdb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hdb_data}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: hdb_api
    restart: always
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-hdb_data}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
    volumes:
      - ./modeling/artifacts:/app/modeling/artifacts
      - ./src:/app/src
      - ./utils:/app/utils
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h postgres"]
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 5s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hdb_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hdb_frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://api:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - hdb_network

networks:
  hdb_network:
    driver: bridge

volumes:
  postgres_data: 